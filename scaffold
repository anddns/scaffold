#!/usr/bin/env bash
# This script was generated by bashly 1.1.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
scaffold_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold - A homebrewed solution for containerized environment software development.\n"
    echo

  else
    printf "scaffold - A homebrewed solution for containerized environment software development.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold COMMAND\n"
  printf "  scaffold [COMMAND] --help | -h\n"
  printf "  scaffold --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run Artisan commands\n" "artisan "
  printf "  %s   Run Composer commands\n" "composer"
  printf "  %s   Run NPM commands\n" "npm     "
  printf "  %s   Build containers from images\n" "build   "
  printf "  %s   Erase the containerized environment completely\n" "destroy "
  printf "  %s   Stop and erase containers\n" "down    "
  printf "  %s   Display container logs\n" "logs    "
  printf "  %s   Start all containers\n" "start   "
  printf "  %s   Stop all containers\n" "stop    "
  printf "  %s   Restart all containers\n" "restart "
  printf "  %s   Initialise containerized environment and the application\n" "init    "
  printf "  %s   Update the container environment\n" "update  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
scaffold_artisan_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold artisan - Run Artisan commands\n"
    echo

  else
    printf "scaffold artisan - Run Artisan commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold artisan [COMMAND]\n"
  printf "  scaffold artisan --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMMAND"
    printf "    Input an Artisan command to be executed\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  artisan list\n"
    printf "  artisan migrate\n"
    printf "  artisan make:controller\n"
    echo

  fi
}

# :command.usage
scaffold_composer_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold composer - Run Composer commands\n"
    echo

  else
    printf "scaffold composer - Run Composer commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold composer [COMMAND]\n"
  printf "  scaffold composer --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMMAND"
    printf "    Input a Composer command to be executed\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  composer help\n"
    printf "  composer install\n"
    printf "  composer dump-autoload\n"
    echo

  fi
}

# :command.usage
scaffold_npm_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold npm - Run NPM commands\n"
    echo

  else
    printf "scaffold npm - Run NPM commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold npm [COMMAND]\n"
  printf "  scaffold npm --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMMAND"
    printf "    Input a NPM command to be executed\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  npm help\n"
    printf "  npm build\n"
    printf "  npm install\n"
    echo

  fi
}

# :command.usage
scaffold_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold build - Build containers from images\n"
    echo

  else
    printf "scaffold build - Build containers from images\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold build [IMAGE]\n"
  printf "  scaffold build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "IMAGE"
    printf "    Name the images to be built into a container\n"
    printf "    Allowed:  , all, backend, frontend, nginx\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  build\n"
    printf "  build backend\n"
    printf "  build frontend\n"
    echo

  fi
}

# :command.usage
scaffold_destroy_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold destroy - Erase the containerized environment completely\n"
    echo

  else
    printf "scaffold destroy - Erase the containerized environment completely\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold destroy\n"
  printf "  scaffold destroy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
scaffold_down_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold down - Stop and erase containers\n"
    echo

  else
    printf "scaffold down - Stop and erase containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold down [CONTAINER]\n"
  printf "  scaffold down --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "CONTAINER"
    printf "    Name the containers to be stopped and erased\n"
    printf "    Allowed:  , all, backend, frontend, nginx\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  down\n"
    printf "  down backend\n"
    printf "  down frontend\n"
    echo

  fi
}

# :command.usage
scaffold_logs_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold logs - Display container logs\n"
    echo

  else
    printf "scaffold logs - Display container logs\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold logs [CONTAINER]\n"
  printf "  scaffold logs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "CONTAINER"
    printf "    Display logs from containers\n"
    printf "    Allowed:  , all, backend, frontend, nginx\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  logs\n"
    printf "  logs backend\n"
    printf "  logs frontend\n"
    echo

  fi
}

# :command.usage
scaffold_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold start - Start all containers\n"
    echo

  else
    printf "scaffold start - Start all containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold start\n"
  printf "  scaffold start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
scaffold_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold stop - Stop all containers\n"
    echo

  else
    printf "scaffold stop - Stop all containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold stop\n"
  printf "  scaffold stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
scaffold_restart_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold restart - Restart all containers\n"
    echo

  else
    printf "scaffold restart - Restart all containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold restart\n"
  printf "  scaffold restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
scaffold_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold init - Initialise containerized environment and the application\n"
    echo

  else
    printf "scaffold init - Initialise containerized environment and the application\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold init\n"
  printf "  scaffold init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
scaffold_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "scaffold update - Update the container environment\n"
    echo

  else
    printf "scaffold update - Update the container environment\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  scaffold update\n"
  printf "  scaffold update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/funtions.sh
# Run Artisan commands
function artisan_cli () {
   docker compose run --rm backend php artisan $1
}

# Run Composer commands
function composer_cli () {
   docker compose run --rm backend composer $1
}

# Run NPM commands
function npm_cli () {
   docker compose run --rm frontend npm $1
}

# Build containers from images
function build_container () {
   docker compose build $1
}

# Stop and erase container
function down_container () {
   docker compose down $1
}

# Start all containers
function start_container () {
   docker compose up -d
}

# Stop all containers
function stop_container () {
   docker compose stop
}

# Restart all containers
function restart_container () {
   stop_container && start_container
}

# Erase the containerized environment completely
function destroy_containers () {
   read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
   if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
   docker compose down -v --rmi all --remove-orphans
}

# Display container logs
function logs_container () {
   docker compose logs -f $1
}

# Create a '.env' file from '.env.example'
function env_create () {
    if [ ! -f .env ]; then
        cp .env.example .env
    fi
}

# Initialise containerized environment and the application
function init_scaffold () {
    env \
        && down_container -v \
        && build_container \
        && docker compose run --rm --entrypoint="//opt/files/init.sh" backend \
        && npm_cli install \
        && start_container
}

# Update the containerized environment
function update_scaffold () {
    git pull \
        && build_container \
        && composer_cli install \
        && artisan_cli migrate \
        && npm_cli install \
        && start_container
}

# :command.command_functions
# :command.function
scaffold_artisan_command() {
  # src/artisan_command.sh
  command=${args[command]}

  artisan_cli $command
}

# :command.function
scaffold_composer_command() {
  # src/composer_command.sh
  command=${args[command]}

  composer_cli $command
}

# :command.function
scaffold_npm_command() {
  # src/npm_command.sh
  command=${args[command]}

  npm_cli $command
}

# :command.function
scaffold_build_command() {
  # src/build_command.sh
  image=${args[image]}

  build_container $image
}

# :command.function
scaffold_destroy_command() {
  # src/destroy_command.sh
  destroy_containers
}

# :command.function
scaffold_down_command() {
  # src/down_command.sh
  container=${args[container]}

  down_container $1
}

# :command.function
scaffold_logs_command() {
  # src/logs_command.sh
  container=${args[contaier]}

  logs_container $container
}

# :command.function
scaffold_start_command() {
  # src/start_command.sh
  start_container
}

# :command.function
scaffold_stop_command() {
  # src/stop_command.sh
  stop_container
}

# :command.function
scaffold_restart_command() {
  # src/restart_command.sh
  restart_container
}

# :command.function
scaffold_init_command() {
  # src/init_command.sh
  init_scaffold
}

# :command.function
scaffold_update_command() {
  # src/update_command.sh
  update_scaffold
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        scaffold_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    artisan)
      action="artisan"
      shift
      scaffold_artisan_parse_requirements "$@"
      shift $#
      ;;

    composer)
      action="composer"
      shift
      scaffold_composer_parse_requirements "$@"
      shift $#
      ;;

    npm)
      action="npm"
      shift
      scaffold_npm_parse_requirements "$@"
      shift $#
      ;;

    build)
      action="build"
      shift
      scaffold_build_parse_requirements "$@"
      shift $#
      ;;

    destroy)
      action="destroy"
      shift
      scaffold_destroy_parse_requirements "$@"
      shift $#
      ;;

    down)
      action="down"
      shift
      scaffold_down_parse_requirements "$@"
      shift $#
      ;;

    logs)
      action="logs"
      shift
      scaffold_logs_parse_requirements "$@"
      shift $#
      ;;

    start)
      action="start"
      shift
      scaffold_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      scaffold_stop_parse_requirements "$@"
      shift $#
      ;;

    restart)
      action="restart"
      shift
      scaffold_restart_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      scaffold_init_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      scaffold_update_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      scaffold_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_artisan_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_artisan_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="artisan"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_composer_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_composer_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="composer"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_npm_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_npm_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="npm"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['image']+x} ]]; then
          args['image']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.whitelist_filter
  if [[ -n ${args['image']:-} ]] && [[ ! ${args['image']:-} =~ ^( |all|backend|frontend|nginx)$ ]]; then
    printf "%s\n" "image must be one of:  , all, backend, frontend, nginx" >&2
    exit 1
  fi

}

# :command.parse_requirements
scaffold_destroy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_destroy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="destroy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_down_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_down_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="down"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['container']+x} ]]; then
          args['container']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.whitelist_filter
  if [[ -n ${args['container']:-} ]] && [[ ! ${args['container']:-} =~ ^( |all|backend|frontend|nginx)$ ]]; then
    printf "%s\n" "container must be one of:  , all, backend, frontend, nginx" >&2
    exit 1
  fi

}

# :command.parse_requirements
scaffold_logs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="logs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['container']+x} ]]; then
          args['container']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.whitelist_filter
  if [[ -n ${args['container']:-} ]] && [[ ! ${args['container']:-} =~ ^( |all|backend|frontend|nginx)$ ]]; then
    printf "%s\n" "container must be one of:  , all, backend, frontend, nginx" >&2
    exit 1
  fi

}

# :command.parse_requirements
scaffold_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scaffold_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        scaffold_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "artisan") scaffold_artisan_command ;;
    "composer") scaffold_composer_command ;;
    "npm") scaffold_npm_command ;;
    "build") scaffold_build_command ;;
    "destroy") scaffold_destroy_command ;;
    "down") scaffold_down_command ;;
    "logs") scaffold_logs_command ;;
    "start") scaffold_start_command ;;
    "stop") scaffold_stop_command ;;
    "restart") scaffold_restart_command ;;
    "init") scaffold_init_command ;;
    "update") scaffold_update_command ;;
  esac
}

initialize
run "$@"
